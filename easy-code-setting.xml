<application>
  <component name="EasyCodeSetting">
    <option name="author" value="luna" />
    <option name="currGlobalConfigGroupName" value="luna-easycode-swagger" />
    <option name="currTemplateGroupName" value="luna-easycode" />
    <option name="globalConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的orm_前缀&#10;$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(&quot;tb_&quot;,&quot;&quot;)))&#10;&#10;##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($column.name.startsWith(&quot;is&quot;) &amp;&amp; $column.type.equals(&quot;java.lang.Boolean&quot;))&#10;    $!column.setName($tool.firstLowerCase($column.name.substring(2)))&#10;#end&#10;#end&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})$desc&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="mybatisSupport" />
                    <option name="value" value="##针对Mybatis 进行支持，主要用于生成xml文件&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##储存列类型&#10;    $tool.call($column.ext.put(&quot;sqlType&quot;, $tool.getField($column.obj.dataType, &quot;typeName&quot;)))&#10;    #if($tool.newHashSet(&quot;java.lang.String&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;VARCHAR&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Boolean&quot;, &quot;boolean&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BOOLEAN&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Byte&quot;, &quot;byte&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BYTE&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Integer&quot;, &quot;int&quot;, &quot;java.lang.Short&quot;, &quot;short&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Long&quot;, &quot;long&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Float&quot;, &quot;float&quot;, &quot;java.lang.Double&quot;, &quot;double&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;NUMERIC&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.util.Date&quot;, &quot;java.sql.Timestamp&quot;, &quot;java.time.Instant&quot;, &quot;java.time.LocalDateTime&quot;, &quot;java.time.OffsetDateTime&quot;, &quot;&#9;java.time.ZonedDateTime&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.sql.Date&quot;, &quot;java.time.LocalDate&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #else&#10;        ##其他类型&#10;        #set($jdbcType=&quot;OTHER&quot;)&#10;    #end&#10;    $tool.call($column.ext.put(&quot;jdbcType&quot;, $jdbcType))&#10;#end&#10;&#10;##定义宏，查询所有列&#10;#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </GlobalConfigGroup>
          </value>
        </entry>
        <entry key="luna-easycode">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的tb_前缀&#10;$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(&quot;tb_&quot;,&quot;&quot;)))&#10;&#10;##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($column.name.startsWith(&quot;is&quot;) &amp;&amp; $column.type.equals(&quot;java.lang.Boolean&quot;))&#10;    $!column.setName($tool.firstLowerCase($column.name.substring(2)))&#10;#end&#10;#end&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})$desc&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="mybatisSupport" />
                    <option name="value" value="##针对Mybatis 进行支持，主要用于生成xml文件&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##储存列类型&#10;    $tool.call($column.ext.put(&quot;sqlType&quot;, $tool.getField($column.obj.dataType, &quot;typeName&quot;)))&#10;    #if($tool.newHashSet(&quot;java.lang.String&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;VARCHAR&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Boolean&quot;, &quot;boolean&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BOOLEAN&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Byte&quot;, &quot;byte&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BYTE&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Integer&quot;, &quot;int&quot;, &quot;java.lang.Short&quot;, &quot;short&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Long&quot;, &quot;long&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Float&quot;, &quot;float&quot;, &quot;java.lang.Double&quot;, &quot;double&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;NUMERIC&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.util.Date&quot;, &quot;java.sql.Timestamp&quot;, &quot;java.time.Instant&quot;, &quot;java.time.LocalDateTime&quot;, &quot;java.time.OffsetDateTime&quot;, &quot;&#9;java.time.ZonedDateTime&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.sql.Date&quot;, &quot;java.time.LocalDate&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #else&#10;        ##其他类型&#10;        #set($jdbcType=&quot;OTHER&quot;)&#10;    #end&#10;    $tool.call($column.ext.put(&quot;jdbcType&quot;, $jdbcType))&#10;#end&#10;&#10;##定义宏，查询所有列&#10;#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="luna-easycode" />
            </GlobalConfigGroup>
          </value>
        </entry>
        <entry key="luna-easycode-swagger">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的tb_前缀&#10;$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(&quot;tb_&quot;,&quot;&quot;)))&#10;&#10;##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($column.name.startsWith(&quot;is&quot;) &amp;&amp; $column.type.equals(&quot;java.lang.Boolean&quot;))&#10;    $!column.setName($tool.firstLowerCase($column.name.substring(2)))&#10;#end&#10;#end&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})$desc&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="mybatisSupport" />
                    <option name="value" value="##针对Mybatis 进行支持，主要用于生成xml文件&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##储存列类型&#10;    $tool.call($column.ext.put(&quot;sqlType&quot;, $tool.getField($column.obj.dataType, &quot;typeName&quot;)))&#10;    #if($tool.newHashSet(&quot;java.lang.String&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;VARCHAR&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Boolean&quot;, &quot;boolean&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BOOLEAN&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Byte&quot;, &quot;byte&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BYTE&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Integer&quot;, &quot;int&quot;, &quot;java.lang.Short&quot;, &quot;short&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Long&quot;, &quot;long&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Float&quot;, &quot;float&quot;, &quot;java.lang.Double&quot;, &quot;double&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;NUMERIC&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.util.Date&quot;, &quot;java.sql.Timestamp&quot;, &quot;java.time.Instant&quot;, &quot;java.time.LocalDateTime&quot;, &quot;java.time.OffsetDateTime&quot;, &quot;&#9;java.time.ZonedDateTime&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.sql.Date&quot;, &quot;java.time.LocalDate&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #else&#10;        ##其他类型&#10;        #set($jdbcType=&quot;OTHER&quot;)&#10;    #end&#10;    $tool.call($column.ext.put(&quot;jdbcType&quot;, $jdbcType))&#10;#end&#10;&#10;##定义宏，查询所有列&#10;#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="luna-easycode-swagger" />
            </GlobalConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="templateGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import lombok.Data;&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($column.type.equals(&quot;java.util.Date&quot;))&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import org.springframework.format.annotation.DateTimeFormat;&#10;#break&#10;    #end&#10;#end&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})实体类&#10; *&#10; * @author luna&#10; * @since $!time.currTime()&#10; */&#10;@Data &#10;public class $!{tableInfo.name} {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})/**&#10;    * ${column.comment}&#10;    */#end&#10;&#10;    #if($column.type.equals(&quot;java.util.Date&quot;))&#10;    @DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dao&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dao&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Mapper;&#10;import org.apache.ibatis.annotations.Param;&#10;import javax.validation.constraints.*;&#10;import java.util.List;&#10;&#10;@Mapper&#10;public interface $!{tableName} {&#10;&#10;   /**&#10;     * 通过主键查询数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getById(@NotNull $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询列表&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询单个&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;    /**&#10;     * 通过Id列表作为筛选条件查询列表，列表长度不为0&#10;     *&#10;     * @param list 列表&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByIds(@NotEmpty List&lt;$!pk.shortType&gt; list);&#10;&#10;    /**&#10;     * 新增实体属性不为null的列&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例&#10;     * @return 影响行数&#10;     */&#10;    int insert(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null&#10;     *&#10;     * @param list 实例&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(@NotEmpty List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 通过主键修改实体属性不为null的列&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例&#10;     * @return 影响行数&#10;     */&#10;    int update(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过表字段修改实体属性不为null的列&#10;     *&#10;     * @param where 条件&#10;     * @param where set&#10;     * @return 影响行数&#10;     */&#10;    int updateByField(@NotNull @Param(&quot;where&quot;) $!{tableInfo.name} where, @NotNull @Param(&quot;set&quot;) $!{tableInfo.name} set);&#10;&#10;    /**&#10;     * 通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null&#10;     *&#10;     * @param list 列表&#10;     * @return 影响行数&#10;     */&#10;    int updateBatch(@NotEmpty List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 通过主键删除&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById(@NotNull $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体非空属性删除&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实体&#10;     * @return 影响行数&#10;     */&#10;    int deleteByEntity(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;  &#10;    /**&#10;     * 通过主键列表删除，列表长度不能为0&#10;     *&#10;     * @param list 列表&#10;     * @return 影响行数&#10;     */&#10;    int deleteByIds(@NotEmpty List&lt;$!pk.shortType&gt; list);&#10;    &#10;    /**&#10;     * 查询行数&#10;     *&#10;     * @return 影响行数&#10;     */&#10;    int countAll();&#10;&#10;    /**&#10;     * 通过实体非空查询行数&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实体&#10;     * @return 影响行数&#10;     */&#10;    int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceI&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;&#10;import java.util.List;&#10;&#10;public interface $!{tableName} {&#10;    &#10;    $!{tableInfo.name}Dao get$!{tableInfo.name}Dao();&#10;   &#10;    $!{tableInfo.name} getById($!pk.shortType $!pk.name);&#10;&#10;    $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    List&lt;$!{tableInfo.name}&gt; listByIds(List&lt;$!pk.shortType&gt; ids);&#10;&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    int insertBatch(List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    int updateBatch(List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;    int deleteByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;  &#10;    int deleteByIds(List&lt;$!pk.shortType&gt; list);&#10;    &#10;    int countAll();&#10;    &#10;    int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}ServiceI;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import javax.annotation.Resource;&#10;import org.springframework.stereotype.Service;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;@Service&#10;public class $!{tableName} implements $!{tableInfo.name}ServiceI {&#10;&#10;    @Resource(type = $!{tableInfo.name}Dao.class)&#10;    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;&#10;&#10;    @Override&#10;    public $!{tableInfo.name}Dao get$!{tableInfo.name}Dao() {&#10;        return $!tool.firstLowerCase($!{tableInfo.name})Dao;&#10;    }&#10;&#10;    public $!{tableInfo.name} getById($!pk.shortType $!pk.name) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.getById($!{pk.name});&#10;    }&#10;&#10;    public $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.getByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    public List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    public List&lt;$!{tableInfo.name}&gt; listByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.listByIds(ids);&#10;    }&#10;&#10;    public int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        Date date = new Date();&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setCreateDatetime(date);&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setUpdateDatetime(date);&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    public int insertBatch(List&lt;$!{tableInfo.name}&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.insertBatch(list);&#10;    }&#10;&#10;    public int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setUpdateDatetime(new Date());&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    public int updateBatch(List&lt;$!{tableInfo.name}&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.updateBatch(list);&#10;    }&#10;&#10;    public int deleteById($!pk.shortType $!pk.name) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name);&#10;    }&#10;&#10;    public int deleteByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;  &#10;    public int deleteByIds(List&lt;$!pk.shortType&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteByIds(list);&#10;    }&#10;&#10;    public int countAll() {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.countAll();&#10;    }&#10;    &#10;    public int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.countByEntity($!tool.firstLowerCase($!{tableInfo.name}));&#10;    }&#10;&#10;}&#10;" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}ServiceI;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;public class $!{tableName} {&#10;    &#10;    @Autowired&#10;    private $!{tableInfo.name}ServiceI $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    @GetMapping(&quot;/get/{$!pk.name}&quot;)&#10;    public $!{tableInfo.name} getById(@PathVariable $!pk.shortType $!pk.name) {&#10;        $tableInfo.name $!tool.firstLowerCase($tableInfo.name) = $!{tool.firstLowerCase($tableInfo.name)}Service.getById(id);&#10;        return $!tool.firstLowerCase($tableInfo.name)!=null?$!tool.firstLowerCase($tableInfo.name):new $!{tableInfo.name}();&#10;    }&#10;&#10;    @GetMapping(&quot;/get&quot;)&#10;    public $!{tableInfo.name} getByEntity($tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        return $!{tool.firstLowerCase($tableInfo.name)}Service.getByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    @GetMapping(&quot;/list&quot;)&#10;    public List&lt;$!{tableInfo.name}&gt; list($tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        List&lt;$tableInfo.name&gt; $!{tool.firstLowerCase($tableInfo.name)}List = $!{tool.firstLowerCase($tableInfo.name)}Service.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return $!{tool.firstLowerCase($tableInfo.name)}List;&#10;    }&#10;&#10;    @PostMapping(&quot;/insert&quot;)&#10;    public $tableInfo.name insert(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        $!{tool.firstLowerCase($tableInfo.name)}Service.insert($!tool.firstLowerCase($tableInfo.name));&#10;        return $!tool.firstLowerCase($tableInfo.name);&#10;    }&#10;&#10;    @PutMapping(&quot;/update&quot;)&#10;    public int update(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        return $!{tool.firstLowerCase($tableInfo.name)}Service.update($!tool.firstLowerCase($tableInfo.name));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete/{$!pk.name}&quot;)&#10;    public int deleteOne(@PathVariable $!pk.shortType $!pk.name){&#10;        return $!{tool.firstLowerCase($tableInfo.name)}Service.deleteById($!pk.name);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete&quot;)&#10;    public int deleteBatch(@RequestBody List&lt;$!pk.shortType&gt; $!{pk.name}s){&#10;        int result = 0;&#10;        if ($!{pk.name}s!=null&amp;&amp;$!{pk.name}s.size()&gt;0) result = $!{tool.firstLowerCase($tableInfo.name)}Service.deleteByIds($!{pk.name}s);&#10;        return result;&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Dao&quot;&gt;&#10;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;$!{tableInfo.name}ResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;table_field&quot;&gt;&#10;      #allSqlColumn()&#10;      &#10;    &lt;/sql&gt;&#10;       &#10;    &lt;!--通过Id查询单个--&gt;&#10;    &lt;select id=&quot;getById&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$pk.type&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/select&gt;&#10;&#10;&#10;    &lt;!--通过实体不为空的属性作为筛选条件查询列表--&gt;&#10;    &lt;select id=&quot;listByEntity&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$!{tableInfo.savePackageName}.domain.$!{tableInfo.name}&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过实体不为空的属性作为筛选条件查询单个--&gt;&#10;    &lt;select id=&quot;getByEntity&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$!{tableInfo.savePackageName}.domain.$!{tableInfo.name}&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过Id列表作为筛选条件查询列表，列表长度不为0--&gt;&#10;    &lt;select id=&quot;listByIds&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;list&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        where $!pk.obj.name in&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;index&quot;&gt;&#10;            #{item}&#10;        &lt;/foreach&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--新增实体属性不为null的列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;$!{tableInfo.savePackageName}.domain.$!{tableInfo.name}&quot;&gt;&#10;        insert into $!{tableInfo.obj.name}&#10;        &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in  $tableInfo.fullColumn)&#10;          &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;             $!column.obj.name,&#10;          &lt;/if&gt;&#10;#end          &#10;        &lt;/trim&gt;&#10;        &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in  $tableInfo.fullColumn)&#10;          &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;             #{$!column.name,jdbcType=$!column.ext.jdbcType},&#10;          &lt;/if&gt;&#10;#end&#10;        &lt;/trim&gt;&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null--&gt;&#10;    &lt;insert id=&quot;insertBatch&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;list&quot;&gt;&#10;        insert into $!{tableInfo.obj.name}&#10;         (#foreach($column in $tableInfo.fullColumn)$!{column.obj.name}#if($velocityHasNext), #end#end)&#10;        values&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;&quot; close=&quot;&quot; index=&quot;index&quot;&gt;&#10;         (#foreach($column in $tableInfo.fullColumn)#{item.$!{column.name},jdbcType=$!column.ext.jdbcType}#if($velocityHasNext), #end#end)&#10;        &lt;/foreach&gt;&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--通过主键修改实体属性不为null的列--&gt;&#10;    &lt;update id=&quot;update&quot; parameterType=&quot;$!{tableInfo.savePackageName}.domain.$!{tableInfo.name}&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过表字段修改实体属性不为null的列--&gt;&#10;    &lt;update id=&quot;updateByField&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;where.$!{column.name} == null and set.$!{column.name} != null#if($column.type.equals(&quot;java.lang.String&quot;)) and set.$!{column.name} != ''#end&quot;&gt;&#10;                $!column.obj.name = #{set.$!{column.name},jdbcType=$!column.ext.jdbcType},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;where.$!{column.name} != null&quot;&gt;&#10;                and $!column.obj.name = #{where.$!{column.name},jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null--&gt;&#10;    &lt;update id=&quot;updateBatch&quot; parameterType=&quot;list&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;trim prefix=&quot;$!{column.obj.name} = case&quot; suffix=&quot;end,&quot;&gt;&#10;                 &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot;&gt;&#10;                  when $!pk.obj.name = #{item.$!pk.name} then #{item.$!column.name}&#10;                 &lt;/foreach&gt;&#10;            &lt;/trim&gt;&#10;#end&#10;        &lt;/trim&gt;&#10;        where $!pk.obj.name in&#10;        &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;&#10;            #{item.$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;        &lt;/foreach&gt;&#10;    &lt;/update&gt;&#10;    &#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot; parameterType=&quot;$pk.type&quot;&gt;&#10;        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/delete&gt;&#10;&#10;    &lt;!--通过实体非空属性删除--&gt;&#10;    &lt;delete id=&quot;deleteByEntity&quot; parameterType=&quot;$!{tableInfo.savePackageName}.domain.$!{tableInfo.name}&quot;&gt;&#10;        delete from $!{tableInfo.obj.name}&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/delete&gt;&#10;    &#10;    &lt;!--通过主键列表删除，列表长度不能为0--&gt;&#10;    &lt;delete id=&quot;deleteByIds&quot; parameterType=&quot;list&quot;&gt;&#10;        delete from $!{tableInfo.obj.name} where $!pk.obj.name in&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;index&quot;&gt;&#10;            #{item}&#10;        &lt;/foreach&gt;&#10;    &lt;/delete&gt;&#10;    &#10;    &lt;select id=&quot;countAll&quot; resultType=&quot;int&quot;&gt;&#10;        select count($!pk.obj.name) from $!{tableInfo.obj.name}&#10;    &lt;/select&gt;&#10;    &#10;    &lt;select id=&quot;countByEntity&quot; parameterType=&quot;$!{tableInfo.savePackageName}.domain.$!{tableInfo.name}&quot; resultType=&quot;int&quot;&gt;&#10;        select count($!pk.obj.name) from $!{tableInfo.obj.name}&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="Default" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="MybatisPlus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##自动导入包（全局变量）&#10;$!autoImport&#10;import com.baomidou.mybatisplus.extension.activerecord.Model;&#10;import java.io.Serializable;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表实体类&quot;)&#10;@SuppressWarnings(&quot;serial&quot;)&#10;public class $!{tableInfo.name} extends Model&lt;$!{tableInfo.name}&gt; {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})//${column.comment}#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#getSetMethod($column)&#10;#end&#10;&#10;#foreach($column in $tableInfo.pkColumn)&#10;    /**&#10;     * 获取主键值&#10;     *&#10;     * @return 主键值&#10;     */&#10;    @Override&#10;    protected Serializable pkVal() {&#10;        return this.$!column.name;&#10;    }&#10;    #break&#10;#end&#10;}" />
                    <option name="name" value="entity" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Dao&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/dao&quot;, &quot;Dao.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;dao&quot;)&#10;&#10;import com.baomidou.mybatisplus.core.mapper.BaseMapper;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表数据库访问层&quot;)&#10;public interface $!{tableName} extends BaseMapper&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="dao" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Service&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service&quot;, &quot;Service.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service&quot;)&#10;&#10;import com.baomidou.mybatisplus.extension.service.IService;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务接口&quot;)&#10;public interface $!{tableName} extends IService&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="service" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;ServiceImpl&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service/impl&quot;, &quot;ServiceImpl.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service.impl&quot;)&#10;&#10;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务实现类&quot;)&#10;@Service(&quot;$!tool.firstLowerCase($tableInfo.name)Service&quot;)&#10;public class $!{tableName} extends ServiceImpl&lt;$!{tableInfo.name}Dao, $!{tableInfo.name}&gt; implements $!{tableInfo.name}Service {&#10;&#10;}" />
                    <option name="name" value="serviceImpl" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Controller&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/controller&quot;, &quot;Controller.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;controller&quot;)&#10;&#10;##定义服务名&#10;#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), &quot;Service&quot;))&#10;&#10;##定义实体对象名&#10;#set($entityName = $!tool.firstLowerCase($!tableInfo.name))&#10;&#10;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;&#10;import com.baomidou.mybatisplus.extension.api.ApiController;&#10;import com.baomidou.mybatisplus.extension.api.R;&#10;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表控制层&quot;)&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($!tableInfo.name)&quot;)&#10;public class $!{tableName} extends ApiController {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    /**&#10;     * 分页查询所有数据&#10;     *&#10;     * @param page 分页对象&#10;     * @param $!entityName 查询实体&#10;     * @return 所有数据&#10;     */&#10;    @GetMapping&#10;    public R selectAll(Page&lt;$!tableInfo.name&gt; page, $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.page(page, new QueryWrapper&lt;&gt;($!entityName)));&#10;    }&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;{id}&quot;)&#10;    public R selectOne(@PathVariable Serializable id) {&#10;        return success(this.$!{serviceName}.getById(id));&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 新增结果&#10;     */&#10;    @PostMapping&#10;    public R insert(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.save($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 修改结果&#10;     */&#10;    @PutMapping&#10;    public R update(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.updateById($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 删除数据&#10;     *&#10;     * @param idList 主键结合&#10;     * @return 删除结果&#10;     */&#10;    @DeleteMapping&#10;    public R delete(@RequestParam(&quot;idList&quot;) List&lt;Long&gt; idList) {&#10;        return success(this.$!{serviceName}.removeByIds(idList));&#10;    }&#10;}" />
                    <option name="name" value="controller" />
                  </Template>
                </list>
              </option>
              <option name="name" value="MybatisPlus" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="luna-easycode">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10; &#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})  &#10;    /**${column.comment} */&#10;    #end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##使用宏定义实现get,set方法&#10;    #getSetMethod($column)&#10;#end&#10; &#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Mapper;&#10;import org.apache.ibatis.annotations.Param;&#10;import javax.validation.constraints.*;&#10;import java.util.List;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@Mapper&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过主键查询数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getById(@NotNull $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询单个&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询列表&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;    /**&#10;     * 通过Id列表作为筛选条件查询列表，列表长度不为0&#10;     *&#10;     * @param list 列表&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByIds(@NotEmpty List&lt;$!pk.shortType&gt; list);&#10;&#10;    /**&#10;     * 新增实体属性不为null的列&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例&#10;     * @return 影响行数&#10;     */&#10;    int insert(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null&#10;     *&#10;     * @param list 实例&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(@NotEmpty List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 通过主键修改实体属性不为null的列&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例&#10;     * @return 影响行数&#10;     */&#10;    int update(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过表字段修改实体属性不为null的列&#10;     *&#10;     * @param where 条件&#10;     * @param where set&#10;     * @return 影响行数&#10;     */&#10;    int updateByField(@NotNull @Param(&quot;where&quot;) $!{tableInfo.name} where, @NotNull @Param(&quot;set&quot;) $!{tableInfo.name} set);&#10;&#10;    /**&#10;     * 通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null&#10;     *&#10;     * @param list 列表&#10;     * @return 影响行数&#10;     */&#10;    int updateBatch(@NotEmpty List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 通过主键删除&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById(@NotNull $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体非空属性删除&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实体&#10;     * @return 影响行数&#10;     */&#10;    int deleteByEntity(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;  &#10;    /**&#10;     * 通过主键列表删除，列表长度不能为0&#10;     *&#10;     * @param list 列表&#10;     * @return 影响行数&#10;     */&#10;    int deleteByIds(@NotEmpty List&lt;$!pk.shortType&gt; list);&#10;    &#10;    /**&#10;     * 查询行数&#10;     *&#10;     * @return 影响行数&#10;     */&#10;    int countAll();&#10;&#10;    /**&#10;     * 通过实体非空查询行数&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实体&#10;     * @return 影响行数&#10;     */&#10;    int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;public interface $!{tableName} {&#10;   &#10;    /**&#10;     * 通过主键查询数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询单个&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询列表&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;    /**&#10;     * 条件分页查询&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件&#10;     * @param page 起始标号&#10;     * @param pageSize 查询条目&#10;     * @return 对象列表&#10;     */&#10;    PageInfo listPageByEntity(int page, int pageSize, $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 条件分页查询&#10;     *&#10;     * @param page 起始标号&#10;     * @param pageSize 查询条目&#10;     * @return 对象列表&#10;     */&#10;    PageInfo listPage(int page, int pageSize);&#10;&#10;    /**&#10;     * Id列表查询对象列表&#10;     *&#10;     * @param ids Id列表&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByIds(List&lt;$!pk.shortType&gt; ids);&#10;&#10;    /**&#10;     * 插入&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 列表插入&#10;     *&#10;     * @param list 列表对象&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 更新&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 列表更新&#10;     *&#10;     * @param list 列表对象&#10;     * @return 影响行数&#10;     */&#10;    int updateBatch(List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 删除&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 条件删除&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int deleteByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10; &#10;     /**&#10;     * 主键列表删除&#10;     *&#10;     * @param list 主键列表&#10;     * @return 影响行数&#10;     */ &#10;    int deleteByIds(List&lt;$!pk.shortType&gt; list);&#10;    &#10;     /**&#10;     * 数据条目&#10;     *&#10;     * @return 影响行数&#10;     */ &#10;    int countAll();&#10;&#10;    /**&#10;     * 条件查询数目&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import javax.annotation.Resource;&#10;import org.springframework.stereotype.Service;&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@Service&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;&#10;    @Autowired&#10;    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;&#10;&#10;    @Override&#10;    public $!{tableInfo.name} getById($!pk.shortType $!pk.name) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.getById($!{pk.name});&#10;    }&#10;&#10;    @Override&#10;    public $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.getByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;    &#10;    @Override&#10;    public PageInfo listPageByEntity(int page, int pageSize, $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        PageHelper.startPage(page,pageSize);&#10;        List&lt;$!{tableInfo.name}&gt; list = $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new PageInfo(list);&#10;    }&#10;    &#10;    @Override&#10;    public PageInfo listPage(int page, int pageSize) {&#10;        PageHelper.startPage(page,pageSize);&#10;        List&lt;$!{tableInfo.name}&gt; list = $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity(new $!{tableInfo.name}());&#10;        return new PageInfo(list);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; listByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByIds(ids);&#10;    }&#10;&#10;    @Override&#10;    public int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        Date date = new Date();&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setCreateTime(date);&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setUpdateTime(date);&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insert($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;   &#10;    @Override&#10;    public int insertBatch(List&lt;$!{tableInfo.name}&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insertBatch(list);&#10;    }&#10;&#10;    @Override&#10;    public int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setUpdateTime(new Date());&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.update($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    @Override&#10;    public int updateBatch(List&lt;$!{tableInfo.name}&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.updateBatch(list);&#10;    }&#10;&#10;    @Override&#10;    public int deleteById($!pk.shortType $!pk.name) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById($!pk.name);&#10;    }&#10;&#10;    @Override&#10;    public int deleteByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;  &#10;    @Override&#10;    public int deleteByIds(List&lt;$!pk.shortType&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteByIds(list);&#10;    }&#10;&#10;    @Override&#10;    public int countAll() {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.countAll();&#10;    }&#10;    &#10;    @Override&#10;    public int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.countByEntity($!tool.firstLowerCase($!{tableInfo.name}));&#10;    }&#10;&#10;}&#10;" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@RestController&#10;@RequestMapping(&quot;/$!tool.firstLowerCase($tableInfo.name)/api&quot;)&#10;public class $!{tableName} {&#10;    &#10;    @Autowired&#10;    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    @GetMapping(&quot;/get/{$!pk.name}&quot;)&#10;    public ResultDTO&lt;$!{tableInfo.name}&gt; getById(@PathVariable(value = &quot;$!pk.name&quot;) $!pk.shortType  $!pk.name ) {&#10;        $tableInfo.name $!tool.firstLowerCase($tableInfo.name) = $!{tool.firstLowerCase($tableInfo.name)}Service.getById(id);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!tool.firstLowerCase($tableInfo.name)!=null?$!tool.firstLowerCase($tableInfo.name) : null);&#10;    }&#10;&#10;    @GetMapping(&quot;/get&quot;)&#10;    public ResultDTO&lt;$!{tableInfo.name}&gt; getByEntity($tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.getByEntity($!{tool.firstLowerCase($!{tableInfo.name})}));&#10;    }&#10;&#10;    @GetMapping(&quot;/list&quot;)&#10;    public ResultDTO&lt;List&lt;$!{tableInfo.name}&gt;&gt; list($tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        List&lt;$tableInfo.name&gt; $!{tool.firstLowerCase($tableInfo.name)}List = $!{tool.firstLowerCase($tableInfo.name)}Service.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}List);&#10;    }&#10;    &#10;    @GetMapping(&quot;/pageListByEntity/{page}/{size}&quot;)&#10;    public ResultDTO&lt;PageInfo&gt; listPageByEntity(@PathVariable(value = &quot;page&quot;)int page, @PathVariable(value = &quot;size&quot;)int size, $tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        PageInfo pageInfo = $!{tool.firstLowerCase($tableInfo.name)}Service.listPageByEntity(page, size, $!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, pageInfo);&#10;    }&#10;    &#10;    @GetMapping(&quot;/pageList/{page}/{size}&quot;)&#10;    public ResultDTO&lt;PageInfo&gt; listPage(@PathVariable(value = &quot;page&quot;)int page, @PathVariable(value = &quot;size&quot;)int size) {&#10;        PageInfo pageInfo = $!{tool.firstLowerCase($tableInfo.name)}Service.listPage(page, size);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, pageInfo);&#10;    }&#10;&#10;    @PostMapping(&quot;/insert&quot;)&#10;    public ResultDTO&lt;$tableInfo.name&gt; insert(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        $!{tool.firstLowerCase($tableInfo.name)}Service.insert($!tool.firstLowerCase($tableInfo.name));&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!tool.firstLowerCase($tableInfo.name));&#10;    }&#10;    &#10;    @PostMapping(&quot;/insertBatch&quot;)&#10;    public ResultDTO&lt;List&lt;$tableInfo.name&gt;&gt; insert(@RequestBody List&lt; $tableInfo.name&gt; list){&#10;        $!{tool.firstLowerCase($tableInfo.name)}Service.insertBatch(list);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, list);&#10;    }&#10;&#10;    @PutMapping(&quot;/update&quot;)&#10;    public ResultDTO&lt;Boolean&gt; update(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.update($!tool.firstLowerCase($tableInfo.name))==1);&#10;    }&#10;    &#10;    @PutMapping(&quot;/updateBatch&quot;)&#10;    public ResultDTO&lt;Boolean&gt; update(@RequestBody List&lt;$tableInfo.name&gt; list){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.updateBatch(list) == list.size());&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete/{$!pk.name}&quot;)&#10;    public ResultDTO&lt;Boolean&gt; deleteOne(@PathVariable(value = &quot;$!pk.name&quot;) $!pk.shortType $!pk.name){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.deleteById($!pk.name)==1);&#10;    }&#10;    &#10;    @DeleteMapping(&quot;/deleteByEntity&quot;)&#10;    public ResultDTO&lt;Boolean&gt; deleteOne(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.deleteByEntity($!tool.firstLowerCase($tableInfo.name)) == 1);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete&quot;)&#10;    public ResultDTO&lt;Integer&gt; deleteBatch(@RequestBody List&lt;$!pk.shortType&gt; $!{pk.name}s){&#10;        int result = 0;&#10;        if ($!{pk.name}s!=null&amp;&amp;$!{pk.name}s.size()&gt;0){ &#10;            result = $!{tool.firstLowerCase($tableInfo.name)}Service.deleteByIds($!{pk.name}s);&#10;        }&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, result);&#10;    }&#10;&#10;    @GetMapping(&quot;/account&quot;)&#10;    public ResultDTO&lt;Integer&gt; getAccount() {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.countAll());&#10;    }&#10;&#10;    @GetMapping(&quot;/accountByEntity&quot;)&#10;    public ResultDTO&lt;Integer&gt; getAccountByEntity($tableInfo.name $!{tool.firstLowerCase($tableInfo.name)}) {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS,&#10;            $!{tool.firstLowerCase($tableInfo.name)}Service.countByEntity($!{tool.firstLowerCase($tableInfo.name)}));&#10;    }&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;$!{tableInfo.name}ResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;table_field&quot;&gt;&#10;      #allSqlColumn()&#10;      &#10;    &lt;/sql&gt;&#10;       &#10;    &lt;!--通过Id查询单个--&gt;&#10;    &lt;select id=&quot;getById&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$pk.type&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/select&gt;&#10;&#10;&#10;    &lt;!--通过实体不为空的属性作为筛选条件查询列表--&gt;&#10;    &lt;select id=&quot;listByEntity&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end &quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过实体不为空的属性作为筛选条件查询单个--&gt;&#10;    &lt;select id=&quot;getByEntity&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end &quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过Id列表作为筛选条件查询列表，列表长度不为0--&gt;&#10;    &lt;select id=&quot;listByIds&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;list&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        where $!pk.obj.name in&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;index&quot;&gt;&#10;            #{item}&#10;        &lt;/foreach&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--新增实体属性不为null的列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        insert into $!{tableInfo.obj.name}&#10;        &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in  $tableInfo.fullColumn)&#10;          &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end &quot;&gt;&#10;             $!column.obj.name,&#10;          &lt;/if&gt;&#10;#end          &#10;        &lt;/trim&gt;&#10;        &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in  $tableInfo.fullColumn)&#10;          &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end &quot;&gt;&#10;             #{$!column.name,jdbcType=$!column.ext.jdbcType},&#10;          &lt;/if&gt;&#10;#end&#10;        &lt;/trim&gt;&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null--&gt;&#10;    &lt;insert id=&quot;insertBatch&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;list&quot;&gt;&#10;        insert into $!{tableInfo.obj.name}&#10;         (#foreach($column in $tableInfo.fullColumn)$!{column.obj.name}#if($velocityHasNext), #end#end)&#10;        values&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;&quot; close=&quot;&quot; index=&quot;index&quot;&gt;&#10;         (#foreach($column in $tableInfo.fullColumn)#{item.$!{column.name},jdbcType=$!column.ext.jdbcType}#if($velocityHasNext), #end#end)&#10;        &lt;/foreach&gt;&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--通过主键修改实体属性不为null的列--&gt;&#10;    &lt;update id=&quot;update&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null  #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过表字段修改实体属性不为null的列--&gt;&#10;    &lt;update id=&quot;updateByField&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;where.$!{column.name} == null and set.$!{column.name} != null#if($column.type.equals(&quot;java.lang.String&quot;)) and set.$!{column.name} != ''#end&quot;&gt;&#10;                $!column.obj.name = #{set.$!{column.name},jdbcType=$!column.ext.jdbcType},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;where.$!{column.name} != null and $!column.name != ''&quot;&gt;&#10;                and $!column.obj.name = #{where.$!{column.name},jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null--&gt;&#10;    &lt;update id=&quot;updateBatch&quot; parameterType=&quot;list&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;trim prefix=&quot;$!{column.obj.name} = case&quot; suffix=&quot;end,&quot;&gt;&#10;                 &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot;&gt;&#10;                  when $!pk.obj.name = #{item.$!pk.name} then #{item.$!column.name}&#10;                 &lt;/foreach&gt;&#10;            &lt;/trim&gt;&#10;#end&#10;        &lt;/trim&gt;&#10;        where $!pk.obj.name in&#10;        &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;&#10;            #{item.$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;        &lt;/foreach&gt;&#10;    &lt;/update&gt;&#10;    &#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot; parameterType=&quot;$pk.type&quot;&gt;&#10;        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/delete&gt;&#10;&#10;    &lt;!--通过实体非空属性删除--&gt;&#10;    &lt;delete id=&quot;deleteByEntity&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        delete from $!{tableInfo.obj.name}&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end &quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/delete&gt;&#10;    &#10;    &lt;!--通过主键列表删除，列表长度不能为0--&gt;&#10;    &lt;delete id=&quot;deleteByIds&quot; parameterType=&quot;list&quot;&gt;&#10;        delete from $!{tableInfo.obj.name} where $!pk.obj.name in&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;index&quot;&gt;&#10;            #{item}&#10;        &lt;/foreach&gt;&#10;    &lt;/delete&gt;&#10;    &#10;    &lt;select id=&quot;countAll&quot; resultType=&quot;int&quot;&gt;&#10;        select count($!pk.obj.name) from $!{tableInfo.obj.name}&#10;    &lt;/select&gt;&#10;    &#10;    &lt;select id=&quot;countByEntity&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; resultType=&quot;int&quot;&gt;&#10;        select count($!pk.obj.name) from $!{tableInfo.obj.name}&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end &quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="luna-easycode" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="luna-easycode-swagger">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10; &#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;@ApiModel(&quot;$!{tableInfo.comment}实体类&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{column.comment})&#10;    /**&#10;      *$!{column.comment}&#10;      */&#10;    @ApiModelProperty(&quot;$!{column.comment}&quot;)&#10;    #else&#10;    @ApiModelProperty(&quot;$!{column.name}&quot;)&#10;    #end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##使用宏定义实现get,set方法&#10;    #getSetMethod($column)&#10;#end&#10; &#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Mapper;&#10;import org.apache.ibatis.annotations.Param;&#10;import javax.validation.constraints.*;&#10;import java.util.List;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@Mapper&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过主键查询数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getById(@NotNull $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询单个&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询列表&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;    /**&#10;     * 通过Id列表作为筛选条件查询列表，列表长度不为0&#10;     *&#10;     * @param list 列表&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByIds(@NotEmpty List&lt;$!pk.shortType&gt; list);&#10;&#10;    /**&#10;     * 新增实体属性不为null的列&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例&#10;     * @return 影响行数&#10;     */&#10;    int insert(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null&#10;     *&#10;     * @param list 实例&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(@NotEmpty List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 通过主键修改实体属性不为null的列&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例&#10;     * @return 影响行数&#10;     */&#10;    int update(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过表字段修改实体属性不为null的列&#10;     *&#10;     * @param where 条件&#10;     * @param where set&#10;     * @return 影响行数&#10;     */&#10;    int updateByField(@NotNull @Param(&quot;where&quot;) $!{tableInfo.name} where, @NotNull @Param(&quot;set&quot;) $!{tableInfo.name} set);&#10;&#10;    /**&#10;     * 通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null&#10;     *&#10;     * @param list 列表&#10;     * @return 影响行数&#10;     */&#10;    int updateBatch(@NotEmpty List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 通过主键删除&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById(@NotNull $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体非空属性删除&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实体&#10;     * @return 影响行数&#10;     */&#10;    int deleteByEntity(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;  &#10;    /**&#10;     * 通过主键列表删除，列表长度不能为0&#10;     *&#10;     * @param list 列表&#10;     * @return 影响行数&#10;     */&#10;    int deleteByIds(@NotEmpty List&lt;$!pk.shortType&gt; list);&#10;    &#10;    /**&#10;     * 查询行数&#10;     *&#10;     * @return 影响行数&#10;     */&#10;    int countAll();&#10;&#10;    /**&#10;     * 通过实体非空查询行数&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实体&#10;     * @return 影响行数&#10;     */&#10;    int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;public interface $!{tableName} {&#10;   &#10;    /**&#10;     * 通过主键查询数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询单个&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询列表&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;    /**&#10;     * 条件分页查询&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件&#10;     * @param page 起始标号&#10;     * @param pageSize 查询条目&#10;     * @return 对象列表&#10;     */&#10;    PageInfo listPageByEntity(int page, int pageSize, $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 条件分页查询&#10;     *&#10;     * @param page 起始标号&#10;     * @param pageSize 查询条目&#10;     * @return 对象列表&#10;     */&#10;    PageInfo listPage(int page, int pageSize);&#10;&#10;    /**&#10;     * Id列表查询对象列表&#10;     *&#10;     * @param ids Id列表&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByIds(List&lt;$!pk.shortType&gt; ids);&#10;&#10;    /**&#10;     * 插入&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 列表插入&#10;     *&#10;     * @param list 列表对象&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 更新&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 列表更新&#10;     *&#10;     * @param list 列表对象&#10;     * @return 影响行数&#10;     */&#10;    int updateBatch(List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 删除&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 条件删除&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int deleteByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10; &#10;     /**&#10;     * 主键列表删除&#10;     *&#10;     * @param list 主键列表&#10;     * @return 影响行数&#10;     */ &#10;    int deleteByIds(List&lt;$!pk.shortType&gt; list);&#10;    &#10;     /**&#10;     * 数据条目&#10;     *&#10;     * @return 影响行数&#10;     */ &#10;    int countAll();&#10;&#10;    /**&#10;     * 条件查询数目&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import javax.annotation.Resource;&#10;import org.springframework.stereotype.Service;&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@Service&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;&#10;    @Resource(type = $!{tableInfo.name}Mapper.class)&#10;    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;&#10;&#10;    @Override&#10;    public $!{tableInfo.name} getById($!pk.shortType $!pk.name) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.getById($!{pk.name});&#10;    }&#10;&#10;    @Override&#10;    public $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.getByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;    &#10;    @Override&#10;    public PageInfo listPageByEntity(int page, int pageSize, $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        PageHelper.startPage(page,pageSize);&#10;        List&lt;$!{tableInfo.name}&gt; list = $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new PageInfo(list);&#10;    }&#10;    &#10;    @Override&#10;    public PageInfo listPage(int page, int pageSize) {&#10;        PageHelper.startPage(page,pageSize);&#10;        List&lt;$!{tableInfo.name}&gt; list = $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity(new $!{tableInfo.name}());&#10;        return new PageInfo(list);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; listByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByIds(ids);&#10;    }&#10;&#10;    @Override&#10;    public int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        Date date = new Date();&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setCreateTime(date);&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setUpdateTime(date);&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insert($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;   &#10;    @Override&#10;    public int insertBatch(List&lt;$!{tableInfo.name}&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insertBatch(list);&#10;    }&#10;&#10;    @Override&#10;    public int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setUpdateTime(new Date());&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.update($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    @Override&#10;    public int updateBatch(List&lt;$!{tableInfo.name}&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.updateBatch(list);&#10;    }&#10;&#10;    @Override&#10;    public int deleteById($!pk.shortType $!pk.name) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById($!pk.name);&#10;    }&#10;&#10;    @Override&#10;    public int deleteByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;  &#10;    @Override&#10;    public int deleteByIds(List&lt;$!pk.shortType&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteByIds(list);&#10;    }&#10;&#10;    @Override&#10;    public int countAll() {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.countAll();&#10;    }&#10;    &#10;    @Override&#10;    public int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.countByEntity($!tool.firstLowerCase($!{tableInfo.name}));&#10;    }&#10;&#10;}&#10;" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@Api(tags = &quot;$!{tableInfo.comment}($!{tableInfo.name})&quot;) &#10;@RestController&#10;@RequestMapping(&quot;/$!tool.firstLowerCase($tableInfo.name)/api&quot;)&#10;public class $!{tableName} {&#10;    &#10;    @Autowired&#10;    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    @ApiOperation(value = &quot;根据id查询$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/get/{$!pk.name}&quot;)&#10;    public ResultDTO&lt;$!{tableInfo.name}&gt; getById(@PathVariable(value = &quot;$!pk.shortType $!pk.name&quot;) $!pk.shortType $!pk.name) {&#10;        $tableInfo.name $!tool.firstLowerCase($tableInfo.name) = $!{tool.firstLowerCase($tableInfo.name)}Service.getById(id);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!tool.firstLowerCase($tableInfo.name)!=null?$!tool.firstLowerCase($tableInfo.name) : null);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;查询全部$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/get&quot;)&#10;    public ResultDTO&lt;$!{tableInfo.name}&gt; getByEntity($tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.getByEntity($!{tool.firstLowerCase($!{tableInfo.name})}));&#10;    }&#10;&#10;    @ApiOperation(value = &quot;条件查询$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/list&quot;)&#10;    public ResultDTO&lt;List&lt;$!{tableInfo.name}&gt;&gt; list($tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        List&lt;$tableInfo.name&gt; $!{tool.firstLowerCase($tableInfo.name)}List = $!{tool.firstLowerCase($tableInfo.name)}Service.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}List);&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;分页条件查询$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/pageListByEntity/{page}/{size}&quot;)&#10;    public ResultDTO&lt;PageInfo&gt; listPageByEntity(@PathVariable(value = &quot;page&quot;)int page, @PathVariable(value = &quot;size&quot;)int size, $tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        PageInfo pageInfo = $!{tool.firstLowerCase($tableInfo.name)}Service.listPageByEntity(page, size, $!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, pageInfo);&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;分页查询$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/pageList/{page}/{size}&quot;)&#10;    public ResultDTO&lt;PageInfo&gt; listPage(@PathVariable(value = &quot;page&quot;)int page, @PathVariable(value = &quot;size&quot;)int size) {&#10;        PageInfo pageInfo = $!{tool.firstLowerCase($tableInfo.name)}Service.listPage(page, size);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, pageInfo);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;插入$!{tableInfo.comment}&quot;)&#10;    @PostMapping(&quot;/insert&quot;)&#10;    public ResultDTO&lt;$tableInfo.name&gt; insert(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        $!{tool.firstLowerCase($tableInfo.name)}Service.insert($!tool.firstLowerCase($tableInfo.name));&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!tool.firstLowerCase($tableInfo.name));&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;批量插入$!{tableInfo.comment}&quot;)&#10;    @PostMapping(&quot;/insertBatch&quot;)&#10;    public ResultDTO&lt;List&lt;$tableInfo.name&gt;&gt; insert(@RequestBody List&lt; $tableInfo.name&gt; list){&#10;        $!{tool.firstLowerCase($tableInfo.name)}Service.insertBatch(list);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, list);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;更新$!{tableInfo.comment}&quot;)&#10;    @PutMapping(&quot;/update&quot;)&#10;    public ResultDTO&lt;Boolean&gt; update(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.update($!tool.firstLowerCase($tableInfo.name))==1);&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;批量更新$!{tableInfo.comment}&quot;)&#10;    @PutMapping(&quot;/updateBatch&quot;)&#10;    public ResultDTO&lt;Boolean&gt; update(@RequestBody List&lt;$tableInfo.name&gt; list){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.updateBatch(list) == list.size());&#10;    }&#10;&#10;    @ApiOperation(value = &quot;主键删除$!{tableInfo.comment}&quot;)&#10;    @DeleteMapping(&quot;/delete/{$!pk.name}&quot;)&#10;    public ResultDTO&lt;Boolean&gt; deleteOne(@PathVariable $!pk.shortType $!pk.name){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.deleteById($!pk.name)==1);&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;条件删除$!{tableInfo.comment}&quot;)&#10;    @DeleteMapping(&quot;/deleteByEntity&quot;)&#10;    public ResultDTO&lt;Boolean&gt; deleteOne(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.deleteByEntity($!tool.firstLowerCase($tableInfo.name)) == 1);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;批量删除$!{tableInfo.comment}&quot;)&#10;    @DeleteMapping(&quot;/delete&quot;)&#10;    public ResultDTO&lt;Integer&gt; deleteBatch(@RequestBody List&lt;$!pk.shortType&gt; $!{pk.name}s){&#10;        int result = 0;&#10;        if ($!{pk.name}s!=null&amp;&amp;$!{pk.name}s.size()&gt;0){ &#10;            result = $!{tool.firstLowerCase($tableInfo.name)}Service.deleteByIds($!{pk.name}s);&#10;        }&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, result);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;记录$!{tableInfo.comment}个数&quot;)&#10;    @GetMapping(&quot;/account&quot;)&#10;    public ResultDTO&lt;Integer&gt; getAccount() {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.countAll());&#10;    }&#10;&#10;    @ApiOperation(value = &quot;条件记录$!{tableInfo.comment}个数&quot;)&#10;    @GetMapping(&quot;/accountByEntity&quot;)&#10;    public ResultDTO&lt;Integer&gt; getAccountByEntity($tableInfo.name $!{tool.firstLowerCase($tableInfo.name)}) {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS,&#10;            $!{tool.firstLowerCase($tableInfo.name)}Service.countByEntity($!{tool.firstLowerCase($tableInfo.name)}));&#10;    }&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;$!{tableInfo.name}ResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;table_field&quot;&gt;&#10;      #allSqlColumn()&#10;      &#10;    &lt;/sql&gt;&#10;       &#10;    &lt;!--通过Id查询单个--&gt;&#10;    &lt;select id=&quot;getById&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$pk.type&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/select&gt;&#10;&#10;&#10;    &lt;!--通过实体不为空的属性作为筛选条件查询列表--&gt;&#10;    &lt;select id=&quot;listByEntity&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过实体不为空的属性作为筛选条件查询单个--&gt;&#10;    &lt;select id=&quot;getByEntity&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过Id列表作为筛选条件查询列表，列表长度不为0--&gt;&#10;    &lt;select id=&quot;listByIds&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;list&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        where $!pk.obj.name in&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;index&quot;&gt;&#10;            #{item}&#10;        &lt;/foreach&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--新增实体属性不为null的列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        insert into $!{tableInfo.obj.name}&#10;        &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in  $tableInfo.fullColumn)&#10;          &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;             $!column.obj.name,&#10;          &lt;/if&gt;&#10;#end          &#10;        &lt;/trim&gt;&#10;        &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in  $tableInfo.fullColumn)&#10;          &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;             #{$!column.name,jdbcType=$!column.ext.jdbcType},&#10;          &lt;/if&gt;&#10;#end&#10;        &lt;/trim&gt;&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null--&gt;&#10;    &lt;insert id=&quot;insertBatch&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;list&quot;&gt;&#10;        insert into $!{tableInfo.obj.name}&#10;         (#foreach($column in $tableInfo.fullColumn)$!{column.obj.name}#if($velocityHasNext), #end#end)&#10;        values&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;&quot; close=&quot;&quot; index=&quot;index&quot;&gt;&#10;         (#foreach($column in $tableInfo.fullColumn)#{item.$!{column.name},jdbcType=$!column.ext.jdbcType}#if($velocityHasNext), #end#end)&#10;        &lt;/foreach&gt;&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--通过主键修改实体属性不为null的列--&gt;&#10;    &lt;update id=&quot;update&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过表字段修改实体属性不为null的列--&gt;&#10;    &lt;update id=&quot;updateByField&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;where.$!{column.name} == null and set.$!{column.name} != null#if($column.type.equals(&quot;java.lang.String&quot;)) and set.$!{column.name} != ''#end&quot;&gt;&#10;                $!column.obj.name = #{set.$!{column.name},jdbcType=$!column.ext.jdbcType},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;where.$!{column.name} != null&quot;&gt;&#10;                and $!column.obj.name = #{where.$!{column.name},jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null--&gt;&#10;    &lt;update id=&quot;updateBatch&quot; parameterType=&quot;list&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;trim prefix=&quot;$!{column.obj.name} = case&quot; suffix=&quot;end,&quot;&gt;&#10;                 &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot;&gt;&#10;                  when $!pk.obj.name = #{item.$!pk.name} then #{item.$!column.name}&#10;                 &lt;/foreach&gt;&#10;            &lt;/trim&gt;&#10;#end&#10;        &lt;/trim&gt;&#10;        where $!pk.obj.name in&#10;        &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;&#10;            #{item.$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;        &lt;/foreach&gt;&#10;    &lt;/update&gt;&#10;    &#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot; parameterType=&quot;$pk.type&quot;&gt;&#10;        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/delete&gt;&#10;&#10;    &lt;!--通过实体非空属性删除--&gt;&#10;    &lt;delete id=&quot;deleteByEntity&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        delete from $!{tableInfo.obj.name}&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/delete&gt;&#10;    &#10;    &lt;!--通过主键列表删除，列表长度不能为0--&gt;&#10;    &lt;delete id=&quot;deleteByIds&quot; parameterType=&quot;list&quot;&gt;&#10;        delete from $!{tableInfo.obj.name} where $!pk.obj.name in&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;index&quot;&gt;&#10;            #{item}&#10;        &lt;/foreach&gt;&#10;    &lt;/delete&gt;&#10;    &#10;    &lt;select id=&quot;countAll&quot; resultType=&quot;int&quot;&gt;&#10;        select count($!pk.obj.name) from $!{tableInfo.obj.name}&#10;    &lt;/select&gt;&#10;    &#10;    &lt;select id=&quot;countByEntity&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; resultType=&quot;int&quot;&gt;&#10;        select count($!pk.obj.name) from $!{tableInfo.obj.name}&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null #if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="luna-easycode-swagger" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="luna-easycode-swagger-feign">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10; &#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;@ApiModel(&quot;$!{tableInfo.comment}实体类&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{column.comment})&#10;    /**&#10;      *$!{column.comment}&#10;      */&#10;    @ApiModelProperty(&quot;$!{column.comment}&quot;)&#10;    #else&#10;    @ApiModelProperty(&quot;$!{column.name}&quot;)&#10;    #end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##使用宏定义实现get,set方法&#10;    #getSetMethod($column)&#10;#end&#10; &#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Mapper;&#10;import org.apache.ibatis.annotations.Param;&#10;import javax.validation.constraints.*;&#10;import java.util.List;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@Mapper&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过主键查询数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getById(@NotNull $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询单个&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询列表&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;    /**&#10;     * 通过Id列表作为筛选条件查询列表，列表长度不为0&#10;     *&#10;     * @param list 列表&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByIds(@NotEmpty List&lt;$!pk.shortType&gt; list);&#10;&#10;    /**&#10;     * 新增实体属性不为null的列&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例&#10;     * @return 影响行数&#10;     */&#10;    int insert(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null&#10;     *&#10;     * @param list 实例&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(@NotEmpty List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 通过主键修改实体属性不为null的列&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例&#10;     * @return 影响行数&#10;     */&#10;    int update(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过表字段修改实体属性不为null的列&#10;     *&#10;     * @param where 条件&#10;     * @param where set&#10;     * @return 影响行数&#10;     */&#10;    int updateByField(@NotNull @Param(&quot;where&quot;) $!{tableInfo.name} where, @NotNull @Param(&quot;set&quot;) $!{tableInfo.name} set);&#10;&#10;    /**&#10;     * 通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null&#10;     *&#10;     * @param list 列表&#10;     * @return 影响行数&#10;     */&#10;    int updateBatch(@NotEmpty List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 通过主键删除&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById(@NotNull $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体非空属性删除&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实体&#10;     * @return 影响行数&#10;     */&#10;    int deleteByEntity(@NotNull $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;  &#10;    /**&#10;     * 通过主键列表删除，列表长度不能为0&#10;     *&#10;     * @param list 列表&#10;     * @return 影响行数&#10;     */&#10;    int deleteByIds(@NotEmpty List&lt;$!pk.shortType&gt; list);&#10;    &#10;    /**&#10;     * 查询行数&#10;     *&#10;     * @return 影响行数&#10;     */&#10;    int countAll();&#10;&#10;    /**&#10;     * 通过实体非空查询行数&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实体&#10;     * @return 影响行数&#10;     */&#10;    int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;public interface $!{tableName} {&#10;   &#10;    /**&#10;     * 通过主键查询数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询单个&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象&#10;     */&#10;    $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过实体不为空的属性作为筛选条件查询列表&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 条件&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;    &#10;    /**&#10;     * 条件分页查询&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 查询条件&#10;     * @param page 起始标号&#10;     * @param pageSize 查询条目&#10;     * @return 对象列表&#10;     */&#10;    PageInfo listPageByEntity(int page, int pageSize, $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 条件分页查询&#10;     *&#10;     * @param page 起始标号&#10;     * @param pageSize 查询条目&#10;     * @return 对象列表&#10;     */&#10;    PageInfo listPage(int page, int pageSize);&#10;&#10;    /**&#10;     * Id列表查询对象列表&#10;     *&#10;     * @param ids Id列表&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; listByIds(List&lt;$!pk.shortType&gt; ids);&#10;&#10;    /**&#10;     * 插入&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 列表插入&#10;     *&#10;     * @param list 列表对象&#10;     * @return 影响行数&#10;     */&#10;    int insertBatch(List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 更新&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 列表更新&#10;     *&#10;     * @param list 列表对象&#10;     * @return 影响行数&#10;     */&#10;    int updateBatch(List&lt;$!{tableInfo.name}&gt; list);&#10;&#10;    /**&#10;     * 删除&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 条件删除&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int deleteByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10; &#10;     /**&#10;     * 主键列表删除&#10;     *&#10;     * @param list 主键列表&#10;     * @return 影响行数&#10;     */ &#10;    int deleteByIds(List&lt;$!pk.shortType&gt; list);&#10;    &#10;     /**&#10;     * 数据条目&#10;     *&#10;     * @return 影响行数&#10;     */ &#10;    int countAll();&#10;&#10;    /**&#10;     * 条件查询数目&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 对象&#10;     * @return 影响行数&#10;     */&#10;    int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import javax.annotation.Resource;&#10;import org.springframework.stereotype.Service;&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@Service&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;&#10;    @Resource(type = $!{tableInfo.name}Mapper.class)&#10;    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;&#10;&#10;    @Override&#10;    public $!{tableInfo.name} getById($!pk.shortType $!pk.name) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.getById($!{pk.name});&#10;    }&#10;&#10;    @Override&#10;    public $!{tableInfo.name} getByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.getByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; listByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;    &#10;    @Override&#10;    public PageInfo listPageByEntity(int page, int pageSize, $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        PageHelper.startPage(page,pageSize);&#10;        List&lt;$!{tableInfo.name}&gt; list = $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new PageInfo(list);&#10;    }&#10;    &#10;    @Override&#10;    public PageInfo listPage(int page, int pageSize) {&#10;        PageHelper.startPage(page,pageSize);&#10;        List&lt;$!{tableInfo.name}&gt; list = $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByEntity(new $!{tableInfo.name}());&#10;        return new PageInfo(list);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; listByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listByIds(ids);&#10;    }&#10;&#10;    @Override&#10;    public int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        Date date = new Date();&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setCreateTime(date);&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setUpdateTime(date);&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insert($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;   &#10;    @Override&#10;    public int insertBatch(List&lt;$!{tableInfo.name}&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insertBatch(list);&#10;    }&#10;&#10;    @Override&#10;    public int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        $!{tool.firstLowerCase($!{tableInfo.name})}.setUpdateTime(new Date());&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.update($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;&#10;    @Override&#10;    public int updateBatch(List&lt;$!{tableInfo.name}&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.updateBatch(list);&#10;    }&#10;&#10;    @Override&#10;    public int deleteById($!pk.shortType $!pk.name) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById($!pk.name);&#10;    }&#10;&#10;    @Override&#10;    public int deleteByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;    }&#10;  &#10;    @Override&#10;    public int deleteByIds(List&lt;$!pk.shortType&gt; list) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteByIds(list);&#10;    }&#10;&#10;    @Override&#10;    public int countAll() {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.countAll();&#10;    }&#10;    &#10;    @Override&#10;    public int countByEntity($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.countByEntity($!tool.firstLowerCase($!{tableInfo.name}));&#10;    }&#10;&#10;}&#10;" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@Api(tags = &quot;$!{tableInfo.comment}($!{tableInfo.name})&quot;) &#10;@RestController&#10;@RequestMapping(&quot;/$!tool.firstLowerCase($tableInfo.name)/api&quot;)&#10;public class $!{tableName} {&#10;    &#10;    @Autowired&#10;    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    @ApiOperation(value = &quot;根据id查询$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/get/{$!pk.name}&quot;)&#10;    public ResultDTO&lt;$!{tableInfo.name}&gt; getById(@PathVariable(value = &quot;$!pk.shortType $!pk.name&quot;) $!pk.shortType $!pk.name) {&#10;        $tableInfo.name $!tool.firstLowerCase($tableInfo.name) = $!{tool.firstLowerCase($tableInfo.name)}Service.getById(id);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!tool.firstLowerCase($tableInfo.name)!=null?$!tool.firstLowerCase($tableInfo.name) : null);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;查询全部$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/get&quot;)&#10;    public ResultDTO&lt;$!{tableInfo.name}&gt; getByEntity($tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.getByEntity($!{tool.firstLowerCase($!{tableInfo.name})}));&#10;    }&#10;&#10;    @ApiOperation(value = &quot;条件查询$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/list&quot;)&#10;    public ResultDTO&lt;List&lt;$!{tableInfo.name}&gt;&gt; list($tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        List&lt;$tableInfo.name&gt; $!{tool.firstLowerCase($tableInfo.name)}List = $!{tool.firstLowerCase($tableInfo.name)}Service.listByEntity($!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}List);&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;分页条件查询$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/pageListByEntity/{page}/{size}&quot;)&#10;    public ResultDTO&lt;PageInfo&gt; listPageByEntity(@PathVariable(value = &quot;page&quot;)int page, @PathVariable(value = &quot;size&quot;)int size, $tableInfo.name $!tool.firstLowerCase($tableInfo.name)) {&#10;        PageInfo pageInfo = $!{tool.firstLowerCase($tableInfo.name)}Service.listPageByEntity(page, size, $!{tool.firstLowerCase($!{tableInfo.name})});&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, pageInfo);&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;分页查询$!{tableInfo.comment}&quot;)&#10;    @GetMapping(&quot;/pageList/{page}/{size}&quot;)&#10;    public ResultDTO&lt;PageInfo&gt; listPage(@PathVariable(value = &quot;page&quot;)int page, @PathVariable(value = &quot;size&quot;)int size) {&#10;        PageInfo pageInfo = $!{tool.firstLowerCase($tableInfo.name)}Service.listPage(page, size);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, pageInfo);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;新增$!{tableInfo.comment}&quot;)&#10;    @PostMapping(&quot;/insert&quot;)&#10;    public ResultDTO&lt;$tableInfo.name&gt; insert(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        $!{tool.firstLowerCase($tableInfo.name)}Service.insert($!tool.firstLowerCase($tableInfo.name));&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!tool.firstLowerCase($tableInfo.name));&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;批量新增$!{tableInfo.comment}&quot;)&#10;    @PostMapping(&quot;/insertBatch&quot;)&#10;    public ResultDTO&lt;List&lt;$tableInfo.name&gt;&gt; insert(@RequestBody List&lt; $tableInfo.name&gt; list){&#10;        $!{tool.firstLowerCase($tableInfo.name)}Service.insertBatch(list);&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, list);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;更新$!{tableInfo.comment}&quot;)&#10;    @PutMapping(&quot;/update&quot;)&#10;    public ResultDTO&lt;Boolean&gt; update(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.update($!tool.firstLowerCase($tableInfo.name))==1);&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;批量更新$!{tableInfo.comment}&quot;)&#10;    @PutMapping(&quot;/updateBatch&quot;)&#10;    public ResultDTO&lt;Boolean&gt; update(@RequestBody List&lt;$tableInfo.name&gt; list){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.updateBatch(list) == list.size());&#10;    }&#10;&#10;    @ApiOperation(value = &quot;主键删除$!{tableInfo.comment}&quot;)&#10;    @DeleteMapping(&quot;/delete/{$!pk.name}&quot;)&#10;    public ResultDTO&lt;Boolean&gt; deleteOne(@PathVariable(value = &quot;$!pk.shortType $!pk.name&quot;) $!pk.shortType $!pk.name){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.deleteById($!pk.name)==1);&#10;    }&#10;    &#10;    @ApiOperation(value = &quot;条件删除$!{tableInfo.comment}&quot;)&#10;    @DeleteMapping(&quot;/deleteByEntity&quot;)&#10;    public ResultDTO&lt;Boolean&gt; deleteOne(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name)){&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.deleteByEntity($!tool.firstLowerCase($tableInfo.name)) == 1);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;批量删除$!{tableInfo.comment}&quot;)&#10;    @DeleteMapping(&quot;/delete&quot;)&#10;    public ResultDTO&lt;Integer&gt; deleteBatch(@RequestBody List&lt;$!pk.shortType&gt; $!{pk.name}s){&#10;        int result = 0;&#10;        if ($!{pk.name}s!=null&amp;&amp;$!{pk.name}s.size()&gt;0){ &#10;            result = $!{tool.firstLowerCase($tableInfo.name)}Service.deleteByIds($!{pk.name}s);&#10;        }&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, result);&#10;    }&#10;&#10;    @ApiOperation(value = &quot;记录$!{tableInfo.comment}个数&quot;)&#10;    @GetMapping(&quot;/account&quot;)&#10;    public ResultDTO&lt;Integer&gt; getAccount() {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS, $!{tool.firstLowerCase($tableInfo.name)}Service.countAll());&#10;    }&#10;&#10;    @ApiOperation(value = &quot;条件记录$!{tableInfo.comment}个数&quot;)&#10;    @GetMapping(&quot;/accountByEntity&quot;)&#10;    public ResultDTO&lt;Integer&gt; getAccountByEntity($tableInfo.name $!{tool.firstLowerCase($tableInfo.name)}) {&#10;        return new ResultDTO&lt;&gt;(true, ResultCode.SUCCESS, ResultCode.MSG_SUCCESS,&#10;            $!{tool.firstLowerCase($tableInfo.name)}Service.countByEntity($!{tool.firstLowerCase($tableInfo.name)}));&#10;    }&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;$!{tableInfo.name}ResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;table_field&quot;&gt;&#10;      #allSqlColumn()&#10;      &#10;    &lt;/sql&gt;&#10;       &#10;    &lt;!--通过Id查询单个--&gt;&#10;    &lt;select id=&quot;getById&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$pk.type&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/select&gt;&#10;&#10;&#10;    &lt;!--通过实体不为空的属性作为筛选条件查询列表--&gt;&#10;    &lt;select id=&quot;listByEntity&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过实体不为空的属性作为筛选条件查询单个--&gt;&#10;    &lt;select id=&quot;getByEntity&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过Id列表作为筛选条件查询列表，列表长度不为0--&gt;&#10;    &lt;select id=&quot;listByIds&quot; resultMap=&quot;$!{tableInfo.name}ResultMap&quot; parameterType=&quot;list&quot;&gt;&#10;        select&#10;          &lt;include refid=&quot;table_field&quot; /&gt;&#10;        from $!tableInfo.obj.name&#10;        where $!pk.obj.name in&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;index&quot;&gt;&#10;            #{item}&#10;        &lt;/foreach&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--新增实体属性不为null的列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        insert into $!{tableInfo.obj.name}&#10;        &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in  $tableInfo.fullColumn)&#10;          &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;             $!column.obj.name,&#10;          &lt;/if&gt;&#10;#end          &#10;        &lt;/trim&gt;&#10;        &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in  $tableInfo.fullColumn)&#10;          &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;             #{$!column.name,jdbcType=$!column.ext.jdbcType},&#10;          &lt;/if&gt;&#10;#end&#10;        &lt;/trim&gt;&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--批量新增所有列，列表长度不能为0，且列表id统一为null或者统一不为null--&gt;&#10;    &lt;insert id=&quot;insertBatch&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot; parameterType=&quot;list&quot;&gt;&#10;        insert into $!{tableInfo.obj.name}&#10;         (#foreach($column in $tableInfo.fullColumn)$!{column.obj.name}#if($velocityHasNext), #end#end)&#10;        values&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;&quot; close=&quot;&quot; index=&quot;index&quot;&gt;&#10;         (#foreach($column in $tableInfo.fullColumn)#{item.$!{column.name},jdbcType=$!column.ext.jdbcType}#if($velocityHasNext), #end#end)&#10;        &lt;/foreach&gt;&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--通过主键修改实体属性不为null的列--&gt;&#10;    &lt;update id=&quot;update&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过表字段修改实体属性不为null的列--&gt;&#10;    &lt;update id=&quot;updateByField&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;where.$!{column.name} == null and set.$!{column.name} != null#if($column.type.equals(&quot;java.lang.String&quot;)) and set.$!{column.name} != ''#end&quot;&gt;&#10;                $!column.obj.name = #{set.$!{column.name},jdbcType=$!column.ext.jdbcType},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;where.$!{column.name} != null&quot;&gt;&#10;                and $!column.obj.name = #{where.$!{column.name},jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过主键修改实体列表，列表长度不能为0，注意：当实体属性为null时，对应的列也会别更新为null--&gt;&#10;    &lt;update id=&quot;updateBatch&quot; parameterType=&quot;list&quot;&gt;&#10;        update $!{tableInfo.obj.name}&#10;        &lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;trim prefix=&quot;$!{column.obj.name} = case&quot; suffix=&quot;end,&quot;&gt;&#10;                 &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot;&gt;&#10;                  when $!pk.obj.name = #{item.$!pk.name} then #{item.$!column.name}&#10;                 &lt;/foreach&gt;&#10;            &lt;/trim&gt;&#10;#end&#10;        &lt;/trim&gt;&#10;        where $!pk.obj.name in&#10;        &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;&#10;            #{item.$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;        &lt;/foreach&gt;&#10;    &lt;/update&gt;&#10;    &#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot; parameterType=&quot;$pk.type&quot;&gt;&#10;        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name,jdbcType=$!pk.ext.jdbcType}&#10;    &lt;/delete&gt;&#10;&#10;    &lt;!--通过实体非空属性删除--&gt;&#10;    &lt;delete id=&quot;deleteByEntity&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot;&gt;&#10;        delete from $!{tableInfo.obj.name}&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/delete&gt;&#10;    &#10;    &lt;!--通过主键列表删除，列表长度不能为0--&gt;&#10;    &lt;delete id=&quot;deleteByIds&quot; parameterType=&quot;list&quot;&gt;&#10;        delete from $!{tableInfo.obj.name} where $!pk.obj.name in&#10;        &lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; index=&quot;index&quot;&gt;&#10;            #{item}&#10;        &lt;/foreach&gt;&#10;    &lt;/delete&gt;&#10;    &#10;    &lt;select id=&quot;countAll&quot; resultType=&quot;int&quot;&gt;&#10;        select count($!pk.obj.name) from $!{tableInfo.obj.name}&#10;    &lt;/select&gt;&#10;    &#10;    &lt;select id=&quot;countByEntity&quot; parameterType=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; resultType=&quot;int&quot;&gt;&#10;        select count($!pk.obj.name) from $!{tableInfo.obj.name}&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name,jdbcType=$!column.ext.jdbcType}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/feign&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}feign;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;&#10;/**&#10;@Author: ${author}&#10;@CreateTime: ${time.currTime(&quot;yyyy-MM-dd HH:mm:ss&quot;)}&#10;*/&#10;@FeignClient(&quot;provider-xxxxx-$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;@Component&#10;public interface $!{tableName} {&#10;    String PROVIDER_URL = &quot;/provider-$!tool.firstLowerCase($tableInfo.name)/$!tool.firstLowerCase($tableInfo.name)/api&quot;;&#10;&#10;&#10;    /**&#10;     * 根据id查询$!{tableInfo.comment}&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    @GetMapping(PROVIDER_URL + &quot;/get/{$!pk.name}&quot;)&#10;    ResultDTO&lt;$!{tableInfo.name}&gt; getById(@PathVariable(value = &quot;$!pk.shortType $!pk.name&quot;) $!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询全部$!{tableInfo.comment}&#10;     *&#10;     * @param $!tool.firstLowerCase($tableInfo.name) $!{tableInfo.comment}&#10;     * @return 对象&#10;     */&#10;    @GetMapping(PROVIDER_URL + &quot;/get&quot;)&#10;    ResultDTO&lt;$!{tableInfo.name}&gt; getByEntity($tableInfo.name $!tool.firstLowerCase($tableInfo.name));&#10;&#10;    /**&#10;     * 条件查询全部$!{tableInfo.comment}&#10;     *&#10;     * @param $!tool.firstLowerCase($tableInfo.name) $!{tableInfo.comment}&#10;     * @return 对象列表&#10;     */&#10;    @GetMapping(PROVIDER_URL + &quot;/list&quot;)&#10;    ResultDTO&lt;List&lt;$!{tableInfo.name}&gt;&gt; list($tableInfo.name $!tool.firstLowerCase($tableInfo.name));&#10;    &#10;    /**&#10;     * 分页分页条件查询$!{tableInfo.comment}&#10;     *&#10;     * @param $!tool.firstLowerCase($tableInfo.name) $!{tableInfo.comment}&#10;     * @param page&#10;     * @param size&#10;     * @return 对象&#10;     */&#10;    @GetMapping(PROVIDER_URL + &quot;/pageListByEntity/{page}/{size}&quot;)&#10;    ResultDTO&lt;PageInfo&gt; listPageByEntity(@PathVariable(value = &quot;page&quot;)int page, @PathVariable(value = &quot;size&quot;)int size, $tableInfo.name $!tool.firstLowerCase($tableInfo.name));&#10;    &#10;    /**&#10;     * 分页查询全部$!{tableInfo.comment}&#10;     * @param page&#10;     * @param size&#10;     * @return 对象&#10;     */&#10;    @GetMapping(PROVIDER_URL + &quot;/pageList/{page}/{size}&quot;)&#10;    ResultDTO&lt;PageInfo&gt; listPage(@PathVariable(value = &quot;page&quot;)int page, @PathVariable(value = &quot;size&quot;)int size);&#10;    &#10;    /**&#10;     * 插入新增$!{tableInfo.comment}&#10;     *&#10;     * @param $!tool.firstLowerCase($tableInfo.name) $!{tableInfo.comment}&#10;     * @return 对象&#10;     */&#10;    @PostMapping(PROVIDER_URL + &quot;/insert&quot;)&#10;    ResultDTO&lt;$tableInfo.name&gt; insert(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name));&#10;    &#10;    /**&#10;     * 批量插入新增$!{tableInfo.comment}&#10;     *&#10;     * @param list $!{tableInfo.comment}列表&#10;     * @return 对象&#10;     */&#10;    @PostMapping(PROVIDER_URL + &quot;/insertBatch&quot;)&#10;    ResultDTO&lt;List&lt;$tableInfo.name&gt;&gt; insert(@RequestBody List&lt; $tableInfo.name&gt; list);&#10;&#10;    /**&#10;     * 更新$!{tableInfo.comment}&#10;     *&#10;     * @param $!tool.firstLowerCase($tableInfo.name) $!{tableInfo.comment}&#10;     * @return 对象&#10;     */&#10;    @PutMapping(PROVIDER_URL + &quot;/update&quot;)&#10;    ResultDTO&lt;Boolean&gt; update(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name));&#10;    &#10;    &#10;    /**&#10;     * 批量更新$!{tableInfo.comment}&#10;     *&#10;     * @param list $!{tableInfo.comment}列表&#10;     * @return 对象&#10;     */&#10;    @PutMapping(PROVIDER_URL + &quot;/updateBatch&quot;)&#10;    ResultDTO&lt;Boolean&gt; update(@RequestBody List&lt;$tableInfo.name&gt; list);&#10;&#10;    /**&#10;     * 根据id删除$!{tableInfo.comment}&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 对象&#10;     */&#10;    @DeleteMapping(PROVIDER_URL + &quot;/delete/{$!pk.name}&quot;)&#10;    ResultDTO&lt;Boolean&gt; deleteOne(@PathVariable(value = &quot;$!pk.shortType $!pk.name&quot;) $!pk.shortType $!pk.name);&#10;    &#10;    /**&#10;     * 条件删除$!{tableInfo.comment}&#10;     *&#10;     * @param $!tool.firstLowerCase($tableInfo.name) $!{tableInfo.comment}&#10;     * @return 对象&#10;     */&#10;    @DeleteMapping(PROVIDER_URL + &quot;/deleteByEntity&quot;)&#10;    ResultDTO&lt;Boolean&gt; deleteOne(@RequestBody $tableInfo.name $!tool.firstLowerCase($tableInfo.name));&#10;&#10;&#10;    /**&#10;     * 批量删除$!{tableInfo.comment}&#10;     *&#10;     * @param $!{pk.name}s &#10;     * @return 对象&#10;     */&#10;    @DeleteMapping(PROVIDER_URL + &quot;/delete&quot;)&#10;    ResultDTO&lt;Integer&gt; deleteBatch(@RequestBody List&lt;$!pk.shortType&gt; $!{pk.name}s);&#10;&#10;     /**&#10;     * 查询记录$!{tableInfo.comment}个数&#10;     *&#10;     * @return 对象&#10;     */&#10;    @GetMapping(PROVIDER_URL + &quot;/account&quot;)&#10;    ResultDTO&lt;Integer&gt; getAccount();&#10;&#10;     /**&#10;     * 条件查询记录$!{tableInfo.comment}个数&#10;     *&#10;     * @param $!tool.firstLowerCase($tableInfo.name) $!{tableInfo.comment}&#10;     * @return 对象&#10;     */&#10;    @GetMapping(PROVIDER_URL + &quot;/accountByEntity&quot;)&#10;    ResultDTO&lt;Integer&gt; getAccountByEntity($tableInfo.name $!{tool.firstLowerCase($tableInfo.name)});&#10;}" />
                    <option name="name" value="feign.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="luna-easycode-swagger-feign" />
            </TemplateGroup>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>