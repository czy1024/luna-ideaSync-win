<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="306" />
    <option name="newTranslationDialogWidth" value="509" />
    <option name="newTranslationDialogX" value="1356" />
    <option name="newTranslationDialogY" value="149" />
    <histories>
      <item value="the maxHistory property is given to TimeBasedRollingPolicy instead of to the TimeBasedFileNamingAndTriggeringPolicy. This makes it more convenient for the user at the cost of inconsistency here." />
      <item value="Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does. Returns false otherwise. If this implements the interface then return true, else if this is a wrapper then return the result of recursively calling isWrapperFor on the wrapped object. If this does not implement the interface and is not a wrapper, return false. This method should be implemented as a low-cost operation compared to unwrap so that callers can use this method to avoid expensive unwrap calls that may fail. If this method returns true then calling unwrap with the same argument should succeed." />
      <item value="Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy. If the receiver implements the interface then the result is the receiver or a proxy for the receiver. If the receiver is a wrapper and the wrapped object implements the interface then the result is the wrapped object or a proxy for the wrapped object. Otherwise return the the result of calling unwrap recursively on the wrapped object or a proxy for that result. If the receiver is not a wrapper and does not implement the interface, then an SQLException is thrown." />
      <item value="Mark the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point, and will also reset the line number appropriately. Params: readAheadLimit – Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail." />
      <item value="An int specifying the line number" />
      <item value="The number of characters actually skipped" />
      <item value="Maximum number of characters to read" />
      <item value="Offset at which to start storing characters" />
      <item value="An int specifying the size of the buffer" />
      <item value="Mark the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point, and will also reset the line number appropriately." />
      <item value="Returns a string representation of this BigDecimal without an exponent field. For values with a positive scale, the number of digits to the right of the decimal point is used to indicate scale. For values with a zero or negative scale, the resulting string is generated as if the value were converted to a numerically equal value with zero scale and as if all the trailing zeros of the zero scale value were present in the result. The entire string is prefixed by a minus sign character '-' ('\u002D') if the unscaled value is less than zero. No sign character is prefixed if the unscaled value is zero or positive. Note that if the result of this method is passed to the string constructor, only the numerical value of this BigDecimal will necessarily be recovered; the representation of the new BigDecimal may have a different scale. In particular, if this BigDecimal has a negative scale, the string resulting from this method will have a scale of zero when processed by the string constructor. (This method behaves analogously to the toString method in 1.4 and earlier releases.)" />
      <item value="Rounding mode to round away from zero. Always increments the digit prior to a non-zero discarded fraction. Note that this rounding mode never decreases the magnitude of the calculated value." />
      <item value="Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round up. Behaves as for RoundingMode.UP if the discarded fraction is ≥ 0.5; otherwise, behaves as for RoundingMode.DOWN. Note that this is the rounding mode commonly taught at school." />
      <item value="Creates a HashMap instance, with a high enough &quot;initial capacity&quot; that it should hold expectedSize elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.6. It also can't be guaranteed that the method isn't inadvertently oversizing the returned map. Params: expectedSize – the number of elements you expect to add to the returned map" />
      <item value="Returns true indicating this GregorianCalendar supports week dates." />
      <item value="commission" />
      <item value="COMMISSION" />
      <item value="Commsion" />
      <item value="Bouns" />
      <item value="this method has a drawback, when the fx item setting has default setting shop_bonus_fx_sku_ids has value : some skuId's setting is default and other skudId's setting is custom" />
      <item value="write" />
      <item value="fifteen same level bonus fans" />
      <item value="five diff level bonus fans" />
      <item value="found no record or sharer_uid is null or fans_uid is same with sharer_uid (infinite loop), then break if" />
      <item value="in case of the level of one of the first three fans is six and the third can achieve diff level bonus and its sharer can achieve same level bonus. suppose the level of buyer chain is sequence : 13456666, so wrong code is hasMaxLevel &amp;&amp; retList.size() &gt;= six, which return 134566" />
      <item value="no matter the num of relation chain, the search observe the following two rules. 1. search all relation chain when there is no none's level is max level. 2. search first three fans because the level of one of the first three fans is max level, maybe the first, the second or the third. boolean hasMaxLevel = false;" />
      <item value="here is a hard-coded business logical : the little red group's highest level, which is 6 today" />
      <item value="Sets the size - indicating how many term buckets should be returned" />
      <item value="指定" />
      <item value="get all bonusDTO belong the level" />
      <item value="shop_bonus_fx_sku_ids has value : some skuId's setting is default and other skudId's setting is custom" />
      <item value="Poster" />
      <item value="Not only is it a great method for avoiding thread blocking of redis, ie. deleting big object, it can also be extremely important for averting exception problems in this thread, ie. cannot del expire key when exception happen." />
      <item value="Old merge sort implementation can be selected (for compatibility with broken comparators) using a system property. Cannot be a static boolean in the enclosing class due to circular dependencies. To be removed in a future release." />
      <item value="背景图" />
      <item value="Resolve the bean class for the specified bean definition, resolving a bean class name into a Class reference (if necessary) and storing the resolved Class in the bean definition for further use." />
      <item value="Create a bean instance for the given merged bean definition (and arguments). The bean definition will already have been merged with the parent definition in case of a child definition." />
      <item value="List of names of manually registered singletons, in registration order." />
      <item value="List of bean definition names, in registration order." />
      <item value="Map of singleton-only bean names, keyed by dependency type." />
      <item value="Return whether the given throwable is a checked exception: that is, neither a RuntimeException nor an Error." />
      <item value="Parses the supplied {@code &lt;bean&gt;} element. May return {@code null} if there were errors during parse. Errors are reported to the" />
      <item value="Create a new BeanComponentDefinition for the given bean." />
      <item value="Process the given bean element, parsing the bean definition and registering it with the registry." />
      <item value="Parse the elements at the root level in the document: &quot;import&quot;, &quot;alias&quot;, &quot;bean&quot;." />
      <item value="Load bean definitions from the specified XML file." />
      <item value="Iterate over a copy to allow for init methods which in turn register new bean definitions. While this may not be part of the regular factory bootstrap, it does otherwise work fine." />
      <item value="Allow for caching all bean definition metadata, not expecting further changes." />
      <item value="Stop using the temporary ClassLoader for type matching." />
      <item value="Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="40" />
        <entry key="ENGLISH" value="41" />
        <entry key="HINDI" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1651024553606" />
  </component>
</application>