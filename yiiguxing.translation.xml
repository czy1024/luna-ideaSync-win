<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="306" />
    <option name="newTranslationDialogWidth" value="509" />
    <option name="newTranslationDialogX" value="1356" />
    <option name="newTranslationDialogY" value="149" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Bouns" />
      <item value="this method has a drawback, when the fx item setting has default setting shop_bonus_fx_sku_ids has value : some skuId's setting is default and other skudId's setting is custom" />
      <item value="write" />
      <item value="fifteen same level bonus fans" />
      <item value="five diff level bonus fans" />
      <item value="found no record or sharer_uid is null or fans_uid is same with sharer_uid (infinite loop), then break if" />
      <item value="in case of the level of one of the first three fans is six and the third can achieve diff level bonus and its sharer can achieve same level bonus. suppose the level of buyer chain is sequence : 13456666, so wrong code is hasMaxLevel &amp;&amp; retList.size() &gt;= six, which return 134566" />
      <item value="no matter the num of relation chain, the search observe the following two rules. 1. search all relation chain when there is no none's level is max level. 2. search first three fans because the level of one of the first three fans is max level, maybe the first, the second or the third. boolean hasMaxLevel = false;" />
      <item value="here is a hard-coded business logical : the little red group's highest level, which is 6 today" />
      <item value="Sets the size - indicating how many term buckets should be returned" />
      <item value="指定" />
      <item value="get all bonusDTO belong the level" />
      <item value="shop_bonus_fx_sku_ids has value : some skuId's setting is default and other skudId's setting is custom" />
      <item value="Poster" />
      <item value="Not only is it a great method for avoiding thread blocking of redis, ie. deleting big object, it can also be extremely important for averting exception problems in this thread, ie. cannot del expire key when exception happen." />
      <item value="Old merge sort implementation can be selected (for compatibility with broken comparators) using a system property. Cannot be a static boolean in the enclosing class due to circular dependencies. To be removed in a future release." />
      <item value="背景图" />
      <item value="Resolve the bean class for the specified bean definition, resolving a bean class name into a Class reference (if necessary) and storing the resolved Class in the bean definition for further use." />
      <item value="Create a bean instance for the given merged bean definition (and arguments). The bean definition will already have been merged with the parent definition in case of a child definition." />
      <item value="List of names of manually registered singletons, in registration order." />
      <item value="List of bean definition names, in registration order." />
      <item value="Map of singleton-only bean names, keyed by dependency type." />
      <item value="Return whether the given throwable is a checked exception: that is, neither a RuntimeException nor an Error." />
      <item value="Parses the supplied {@code &lt;bean&gt;} element. May return {@code null} if there were errors during parse. Errors are reported to the" />
      <item value="Create a new BeanComponentDefinition for the given bean." />
      <item value="Process the given bean element, parsing the bean definition and registering it with the registry." />
      <item value="Parse the elements at the root level in the document: &quot;import&quot;, &quot;alias&quot;, &quot;bean&quot;." />
      <item value="Load bean definitions from the specified XML file." />
      <item value="Iterate over a copy to allow for init methods which in turn register new bean definitions. While this may not be part of the regular factory bootstrap, it does otherwise work fine." />
      <item value="Allow for caching all bean definition metadata, not expecting further changes." />
      <item value="Stop using the temporary ClassLoader for type matching." />
      <item value="Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early." />
      <item value="Register a default embedded value resolver if no bean post-processor (such as a PropertyPlaceholderConfigurer bean) registered any before: at this point, primarily for resolution in annotation attribute values." />
      <item value="Initialize conversion service for this context." />
      <item value="Instantiate all remaining (non-lazy-init) singletons." />
      <item value="Finish the initialization of this context's bean factory, initializing all remaining singleton beans." />
      <item value="Invoke factory processors registered as beans in the context." />
      <item value="Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime" />
      <item value="Register default environment beans." />
      <item value="Detect a LoadTimeWeaver and prepare for weaving, if found." />
      <item value="Register early post-processor for detecting inner beans as ApplicationListeners." />
      <item value="Create a new {@code StandardBeanExpressionResolver} with the given bean class loader, using it as the basis for expression compilation." />
      <item value="Configure the factory's standard context characteristics, such as the context's ClassLoader and post-processors." />
      <item value="Get the role hint for this {@code BeanDefinition}. The role hint provides the frameworks as well as tools with an indication of the role and importance of a particular {@code BeanDefinition}." />
      <item value="frozen" />
      <item value="Create the {@link XmlReaderContext} to pass over to the document reader." />
      <item value="reading bean definitions from an XML document." />
      <item value="Take an array of strings and split each element based on the given delimiter. A {@code Properties} instance is then generated, with the left of the delimiter providing the key, and the right of the delimiter providing the value." />
      <item value="Convert a comma delimited list (e.g., a row from a CSV file) into an array of strings." />
      <item value="System property that instructs Spring to ignore system environment variables," />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="20" />
        <entry key="ENGLISH" value="20" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1638358742065" />
  </component>
</application>